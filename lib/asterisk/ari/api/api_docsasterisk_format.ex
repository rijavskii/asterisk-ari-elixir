# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Asterisk.ARI.Api.ApiDocsasteriskFormat do
  @moduledoc """
  API calls for all endpoints tagged `ApiDocsasteriskFormat`.
  """

  alias Asterisk.ARI.Connection
  import Asterisk.ARI.RequestBuilder


  @doc """
  Adds a log channel.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - log_channel_name (String.t): The log channel to add
  - configuration (String.t): levels of the log channel
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec add_log(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def add_log(connection, log_channel_name, configuration, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/asterisk/logging/#{log_channel_name}")
    |> add_param(:query, :"configuration", configuration)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Deletes a log channel.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - log_channel_name (String.t): Log channels name
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_log(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_log(connection, log_channel_name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/asterisk/logging/#{log_channel_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Delete a dynamic configuration object.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - config_class (String.t): The configuration class containing dynamic configuration objects.
  - object_type (String.t): The type of configuration object to delete.
  - id (String.t): The unique identifier of the object to delete.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_object(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_object(connection, config_class, object_type, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/asterisk/config/dynamic/#{config_class}/#{object_type}/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get the value of a global variable.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - variable (String.t): The variable to get
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec get_global_var(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_global_var(connection, variable, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/asterisk/variable")
    |> add_param(:query, :"variable", variable)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets Asterisk system information.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :only ([String.t]): Filter information returned

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec get_info(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_info(connection, opts \\ []) do
    optional_params = %{
      :"only" => :query
    }
    %{}
    |> method(:get)
    |> url("/asterisk/info")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get Asterisk module information.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - module_name (String.t): Module&#39;s name
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec get_module(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_module(connection, module_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/asterisk/modules/#{module_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieve a dynamic configuration object.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - config_class (String.t): The configuration class containing dynamic configuration objects.
  - object_type (String.t): The type of configuration object to retrieve.
  - id (String.t): The unique identifier of the object to retrieve.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec get_object(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_object(connection, config_class, object_type, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/asterisk/config/dynamic/#{config_class}/#{object_type}/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets Asterisk log channel information.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec list_log_channels(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def list_log_channels(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/asterisk/logging")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  List Asterisk modules.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec list_modules(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def list_modules(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/asterisk/modules")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Load an Asterisk module.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - module_name (String.t): Module&#39;s name
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec load_module(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def load_module(connection, module_name, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/asterisk/modules/#{module_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Reload an Asterisk module.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - module_name (String.t): Module&#39;s name
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec reload_module(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def reload_module(connection, module_name, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/asterisk/modules/#{module_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Rotates a log channel.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - log_channel_name (String.t): Log channel&#39;s name
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec rotate_log(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def rotate_log(connection, log_channel_name, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/asterisk/logging/#{log_channel_name}/rotate")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Set the value of a global variable.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - variable (String.t): The variable to set
  - opts (KeywordList): [optional] Optional parameters
    - :value (String.t): The value to set the variable to

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec set_global_var(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def set_global_var(connection, variable, opts \\ []) do
    optional_params = %{
      :"value" => :query
    }
    %{}
    |> method(:post)
    |> url("/asterisk/variable")
    |> add_param(:query, :"variable", variable)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Unload an Asterisk module.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - module_name (String.t): Module&#39;s name
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec unload_module(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def unload_module(connection, module_name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/asterisk/modules/#{module_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Create or update a dynamic configuration object.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - config_class (String.t): The configuration class containing dynamic configuration objects.
  - object_type (String.t): The type of configuration object to create or update.
  - id (String.t): The unique identifier of the object to create or update.
  - opts (KeywordList): [optional] Optional parameters
    - :fields (Containers): The body object should have a value that is a list of ConfigTuples, which provide the fields to update. Ex. [ { \&quot;attribute\&quot;: \&quot;directmedia\&quot;, \&quot;value\&quot;: \&quot;false\&quot; } ]

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec update_object(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def update_object(connection, config_class, object_type, id, opts \\ []) do
    optional_params = %{
      :"fields" => :body
    }
    %{}
    |> method(:put)
    |> url("/asterisk/config/dynamic/#{config_class}/#{object_type}/#{id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
