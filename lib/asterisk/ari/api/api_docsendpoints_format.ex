# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Asterisk.ARI.Api.ApiDocsendpointsFormat do
  @moduledoc """
  API calls for all endpoints tagged `ApiDocsendpointsFormat`.
  """

  alias Asterisk.ARI.Connection
  import Asterisk.ARI.RequestBuilder


  @doc """
  Details for an endpoint.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - tech (String.t): Technology of the endpoint
  - resource (String.t): ID of the endpoint
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get(connection, tech, resource, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/endpoints/#{tech}/#{resource}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  List all endpoints.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec list(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def list(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/endpoints")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  List available endoints for a given endpoint technology.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - tech (String.t): Technology of the endpoints (sip,iax2,...)
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec list_by_tech(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def list_by_tech(connection, tech, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/endpoints/#{tech}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Send a message to some technology URI or endpoint.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - to (String.t): The endpoint resource or technology specific URI to send the message to. Valid resources are sip, pjsip, and xmpp.
  - from (String.t): The endpoint resource or technology specific identity to send this message from. Valid resources are sip, pjsip, and xmpp.
  - opts (KeywordList): [optional] Optional parameters
    - :body (String.t): The body of the message
    - :variables (Containers): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec send_message(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def send_message(connection, to, from, opts \\ []) do
    optional_params = %{
      :"body" => :query,
      :"variables" => :body
    }
    %{}
    |> method(:put)
    |> url("/endpoints/sendMessage")
    |> add_param(:query, :"to", to)
    |> add_param(:query, :"from", from)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Send a message to some endpoint in a technology.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - tech (String.t): Technology of the endpoint
  - resource (String.t): ID of the endpoint
  - from (String.t): The endpoint resource or technology specific identity to send this message from. Valid resources are sip, pjsip, and xmpp.
  - opts (KeywordList): [optional] Optional parameters
    - :body (String.t): The body of the message
    - :variables (Containers): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec send_message_to_endpoint(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def send_message_to_endpoint(connection, tech, resource, from, opts \\ []) do
    optional_params = %{
      :"body" => :query,
      :"variables" => :body
    }
    %{}
    |> method(:put)
    |> url("/endpoints/#{tech}/#{resource}/sendMessage")
    |> add_param(:query, :"from", from)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
