# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Asterisk.ARI.Api.ApiDocsrecordingsFormat do
  @moduledoc """
  API calls for all endpoints tagged `ApiDocsrecordingsFormat`.
  """

  alias Asterisk.ARI.Connection
  import Asterisk.ARI.RequestBuilder


  @doc """
  Stop a live recording and discard it.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - recording_name (String.t): The name of the recording
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec cancel(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def cancel(connection, recording_name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/recordings/live/#{recording_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Copy a stored recording.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - recording_name (String.t): The name of the recording to copy
  - destination_recording_name (String.t): The destination name of the recording
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec copy_stored(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def copy_stored(connection, recording_name, destination_recording_name, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/recordings/stored/#{recording_name}/copy")
    |> add_param(:query, :"destinationRecordingName", destination_recording_name)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Delete a stored recording.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - recording_name (String.t): The name of the recording
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_stored(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_stored(connection, recording_name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/recordings/stored/#{recording_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  List live recordings.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - recording_name (String.t): The name of the recording
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec get_live(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_live(connection, recording_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/recordings/live/#{recording_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get a stored recording&#39;s details.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - recording_name (String.t): The name of the recording
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec get_stored(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_stored(connection, recording_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/recordings/stored/#{recording_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get the file associated with the stored recording.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - recording_name (String.t): The name of the recording
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec get_stored_file(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_stored_file(connection, recording_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/recordings/stored/#{recording_name}/file")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  List recordings that are complete.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec list_stored(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def list_stored(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/recordings/stored")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Mute a live recording.
  Muting a recording suspends silence detection, which will be restarted when the recording is unmuted.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - recording_name (String.t): The name of the recording
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec mute(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def mute(connection, recording_name, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/recordings/live/#{recording_name}/mute")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Pause a live recording.
  Pausing a recording suspends silence detection, which will be restarted when the recording is unpaused. Paused time is not included in the accounting for maxDurationSeconds.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - recording_name (String.t): The name of the recording
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec pause(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def pause(connection, recording_name, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/recordings/live/#{recording_name}/pause")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Stop a live recording and store it.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - recording_name (String.t): The name of the recording
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec stop(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def stop(connection, recording_name, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/recordings/live/#{recording_name}/stop")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Unmute a live recording.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - recording_name (String.t): The name of the recording
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec unmute(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def unmute(connection, recording_name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/recordings/live/#{recording_name}/mute")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Unpause a live recording.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - recording_name (String.t): The name of the recording
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec unpause(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def unpause(connection, recording_name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/recordings/live/#{recording_name}/pause")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
