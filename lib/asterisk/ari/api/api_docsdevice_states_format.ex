# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule Asterisk.ARI.Api.ApiDocsdeviceStatesFormat do
  @moduledoc """
  API calls for all endpoints tagged `ApiDocsdeviceStatesFormat`.
  """

  alias Asterisk.ARI.Connection
  import Asterisk.ARI.RequestBuilder


  @doc """
  Destroy a device-state controlled by ARI.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - device_name (String.t): Name of the device
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete(connection, device_name, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/deviceStates/#{device_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieve the current state of a device.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - device_name (String.t): Name of the device
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec get(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get(connection, device_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/deviceStates/#{device_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  List all ARI controlled device states.

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec list(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def list(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/deviceStates")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Change the state of a device controlled by ARI. (Note - implicitly creates the device state).

  ## Parameters

  - connection (Asterisk.ARI.Connection): Connection to server
  - device_name (String.t): Name of the device
  - device_state (String.t): Device state value
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec update(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def update(connection, device_name, device_state, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/deviceStates/#{device_name}")
    |> add_param(:query, :"deviceState", device_state)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
